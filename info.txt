СТРУКТУРА ПРОЕКТА


----------------------------------------------------------------------------
DOCKER

в каждом сервисе (api,frontend,...) есть папка docker, в которой находяться
файлы, для создания образов с рабочим окружением
    структура:
        - common - общие файлы настроек
        - dev - настройки для локальной разработки
                конфиги и Dockerfile для
                    - nginx - сервер
                    - php-cli - настройки для консольного php (после запуска сразу тухнит)
                    - php-fpm - настройки php
        - prod - настройки для продакта

образы docker пушиться в наш реестр (registry.cubic-dev.tech) на сервере, при запусе docker на сервер,
он будит пулить нужные ему образы и поднимать с нашего реестра

для продакта сначала билдим образ затем его пушим

нужные команды прописаны в Makefile которые вызываються с перемеными окружения

при сборке образа для product, используеться такая команда
docker build --pull --file api/docker/prod/nginx/Dockerfile --tag registry.cubic-dev.tech/micro_nginx:master-1 api
    где
        --pull - перед сборкой скачивать обновленые версии оригинальных образов
        --file - из какого файла собираем образ
        --tag - задаем тэг, как будет назван образ (под каким именем его сохранят)
            правила по названию тэга ( registry.cubic-dev.tech/micro_nginx:master-1 )
                registry.cubic-dev.tech - домен хранилища (регистра), куда пушаться/пуляться образы
                micro - название проекта
                nginx - сервис
                master - ветка git, для которого создаеться контейнер (может быть develop, feature, ...)
                1 - версия нашего сайта
        api - из какой папки собираем
из Makefile вызываеться как

docker login -u user -p password registry.cubic-dev-tech
REGISTRY=registry.cubic-dev.tech IMAGE_TAG=master-1 make build
REGISTRY=registry.cubic-dev.tech IMAGE_TAG=master-1 make push
-------------------------------------------------------------------------------


-----------------------------------------------------------------------------
gateway - являеться шлюзом ,который висит на 80 порту, и перенаправляет запросы
    на frontend или api
    - у нас будет одна точка входа , а в gateway мы можем поднимать любое кол-во сервисов
    - можем для gateway настроить https и настроить безапасность, и избавить ее от api и frontend

                /   frontend
    gateway 80
            443
                \   api - php-fpm

---------------------------------------------------------------------------

provisioning - папка с файлами для автоматического развертывание на сервере
    используеться ansible, структура модульная

папка roles - автоматизация для разных задача
roles/docker - устанавливает на сервере docker

----------------------------------------------------------------------------
Запуск консольных приложений
- docker-compose run --rm api-php-cli php bin/app.php